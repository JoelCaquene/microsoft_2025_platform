# Generated by Django 5.2.5 on 2025-08-08 23:19

import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Bank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Nome do Banco')),
                ('account_name', models.CharField(max_length=150, verbose_name='Nome do Titular da Conta')),
                ('iban', models.CharField(max_length=34, verbose_name='IBAN da Conta')),
                ('is_active', models.BooleanField(default=True, verbose_name='Ativo para Depósito')),
            ],
            options={
                'verbose_name': 'Banco para Depósito',
                'verbose_name_plural': 'Bancos para Depósito',
            },
        ),
        migrations.CreateModel(
            name='LuckyWheelPrize',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Valor do Prêmio (Kz)')),
                ('weight', models.IntegerField(default=1, verbose_name='Peso/Probabilidade (maior = mais chance)')),
                ('is_active', models.BooleanField(default=True, verbose_name='Ativo')),
                ('name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Nome do Prêmio (Opcional)')),
                ('daily_spins_allowed', models.IntegerField(default=1, verbose_name='Giros Diários Permitidos')),
            ],
            options={
                'verbose_name': 'Prêmio da Roda da Sorte',
                'verbose_name_plural': 'Prêmios da Roda da Sorte',
                'ordering': ['-value'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level_name', models.CharField(max_length=50, unique=True, verbose_name='Nome do Nível (Ex: VIP 1)')),
                ('min_deposit_amount', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Valor Mínimo de Depósito')),
                ('daily_income', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Renda Diária')),
                ('duration_days', models.IntegerField(default=30, verbose_name='Duração em Dias')),
                ('order', models.IntegerField(default=0, verbose_name='Ordem de Exibição')),
                ('is_active', models.BooleanField(default=True, verbose_name='Ativo')),
            ],
            options={
                'verbose_name': 'Produto de Investimento',
                'verbose_name_plural': 'Produtos de Investimento',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='SupportInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('whatsapp_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='Número de WhatsApp')),
                ('telegram_username', models.CharField(blank=True, max_length=50, null=True, verbose_name='Nome de Usuário Telegram')),
                ('platform_info', models.TextField(blank=True, null=True, verbose_name='Informações da Plataforma')),
                ('platform_rules', models.TextField(blank=True, null=True, verbose_name='Regras da Plataforma')),
            ],
            options={
                'verbose_name': 'Informação de Suporte',
                'verbose_name_plural': 'Informações de Suporte',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(max_length=15, unique=True, verbose_name='Número de Telefone')),
                ('balance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='Saldo')),
                ('bonus_balance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='Saldo Bônus')),
                ('level_activation_date', models.DateTimeField(blank=True, null=True, verbose_name='Data de Ativação do Nível')),
                ('my_invitation_code', models.CharField(blank=True, max_length=20, null=True, unique=True, verbose_name='Meu Código de Convite')),
                ('invited_by_code', models.CharField(blank=True, max_length=20, null=True, verbose_name='Convidado Pelo Código')),
                ('referral_income', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='Ganhos de Convite')),
                ('can_spin_lucky_wheel', models.BooleanField(default=False, verbose_name='Pode Rodar Roleta da Sorte')),
                ('daily_spins_remaining', models.IntegerField(default=0, verbose_name='Giros Diários Restantes')),
                ('last_spin_date', models.DateField(blank=True, null=True, verbose_name='Última Data de Giro')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('current_product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.product', verbose_name='Produto de Investimento Atual')),
            ],
            options={
                'verbose_name': 'Usuário',
                'verbose_name_plural': 'Usuários',
            },
        ),
        migrations.CreateModel(
            name='Deposit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Valor do Depósito')),
                ('proof_image', models.ImageField(blank=True, null=True, upload_to='deposit_proofs/', verbose_name='Comprovativo')),
                ('status', models.CharField(choices=[('Pending', 'Pendente'), ('Approved', 'Aprovado'), ('Rejected', 'Rejeitado')], default='Pending', max_length=10, verbose_name='Status')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Data/Hora')),
                ('bank', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.bank', verbose_name='Banco Selecionado')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={
                'verbose_name': 'Depósito',
                'verbose_name_plural': 'Depósitos',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='LuckyWheelSpin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('spin_time', models.DateTimeField(auto_now_add=True, verbose_name='Data/Hora do Giro')),
                ('is_paid_spin', models.BooleanField(default=False, verbose_name='Giro Pago (se aplicável)')),
                ('prize_won', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.luckywheelprize', verbose_name='Prêmio Ganho')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={
                'verbose_name': 'Giro da Roda da Sorte',
                'verbose_name_plural': 'Giros da Roda da Sorte',
                'ordering': ['-spin_time'],
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_completed', models.BooleanField(default=False, verbose_name='Concluída')),
                ('creation_date', models.DateTimeField(auto_now_add=True, verbose_name='Data de Criação')),
                ('completion_date', models.DateTimeField(blank=True, null=True, verbose_name='Data de Conclusão')),
                ('last_income_calculation_date', models.DateField(blank=True, null=True, verbose_name='Último Cálculo de Renda')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.product', verbose_name='Produto de Investimento')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={
                'verbose_name': 'Tarefa',
                'verbose_name_plural': 'Tarefas',
                'ordering': ['-creation_date'],
            },
        ),
        migrations.CreateModel(
            name='UserBankAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bank_name', models.CharField(max_length=100, verbose_name='Nome do Banco')),
                ('account_name', models.CharField(max_length=150, verbose_name='Nome do Titular da Conta')),
                ('iban', models.CharField(max_length=34, unique=True, verbose_name='IBAN')),
                ('is_active', models.BooleanField(default=True, verbose_name='Ativo')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de Criação')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bank_accounts', to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={
                'verbose_name': 'Conta Bancária do Usuário',
                'verbose_name_plural': 'Contas Bancárias do Usuário',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Nome Completo')),
                ('bank_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Nome do Banco Principal')),
                ('iban', models.CharField(blank=True, max_length=34, null=True, verbose_name='IBAN Principal')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={
                'verbose_name': 'Perfil do Usuário',
                'verbose_name_plural': 'Perfis dos Usuários',
            },
        ),
        migrations.CreateModel(
            name='Withdrawal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Valor Solicitado')),
                ('tax_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, verbose_name='Percentagem da Taxa')),
                ('amount_received', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Valor a Receber')),
                ('status', models.CharField(choices=[('Pending', 'Pendente'), ('Approved', 'Aprovado'), ('Rejected', 'Rejeitado')], default='Pending', max_length=10, verbose_name='Status')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Data/Hora')),
                ('approved_at', models.DateTimeField(blank=True, null=True, verbose_name='Aprovado Em')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
                ('user_bank_account', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.userbankaccount', verbose_name='Conta Bancária de Destino')),
            ],
            options={
                'verbose_name': 'Retirada',
                'verbose_name_plural': 'Retiradas',
                'ordering': ['-timestamp'],
            },
        ),
    ]
